
一. redis使用的7个场景

	1.缓存---热数据
		1）热点数据（经常会被查询，但是不经常被修改或者删除的数据）。QPS（每秒查询率）强大，稳定性高。
		2）而且相比于memcached还提供了丰富的数据类型可以使用。
		3）内存中的数据也提供了AOF和RDB等持久化机制可以选择，要冷、热的还是忽冷忽热的都可选。
		
	2.计数器
		诸如统计点击数等应用。由于单线程，可以避免并发问题，保证不会出错，而且100%毫秒级性能！
		命令：INCRBY
	
	3.队列
		相当于消息系统，ActiveMQ，RocketMQ等工具类似，但是个人觉得简单用一下还行，如果对于数据一致性要求高的话还是用RocketMQ等专业系统。
		由于redis把数据添加到队列是返回添加元素在队列的第几位，所以可以做判断用户是第几个访问这种业务。
		队列不仅可以把并发请求变成串行，并且还可以做队列或者栈使用。
	
	4.位操作（大数据处理）
		暂时不看
	
	5.分布式锁与单线程机制
		1）验证前端的重复请求（可以自由扩展类似情况），可以通过redis进行过滤：每次请求将request Ip、参数、接口等hash作为key存储redis（幂等性请求），
			设置多长时间有效期，然后下次请求过来的时候先在redis中检索有没有这个key，进而验证是不是一定时间内过来的重复提交。
		2）秒杀系统，基于redis是单线程特征，防止出现数据库“爆破”。
		3）全局增量ID生成，类似“秒杀”。
		
	6.最新列表
		例如新闻列表页面最新的新闻列表，如果总数量很大的情况下，尽量不要使用select a from A limit 10这种low货，尝试redis的 LPUSH命令构建List，
		一个个顺序都塞进去就可以啦。不过万一内存清掉了咋办？也简单，查询不到存储key的话，用mysql查询并且初始化一个List到redis中就好了。
		
	7.排行榜
		谁得分高谁排名往上。命令：ZADD（有续集，sorted set）.
		



二.设计一个秒杀系统
	https://www.cnblogs.com/wangzhongqiu/p/6557596.html
		

三.redis的三种模式

	1.主从模式
		同Mysql主从复制的原因一样，Redis虽然读取写入的速度都特别快，但是也会产生读压力特别大的情况。为了分担读压力，Redis支持主从复制，
		Redis的主从结构可以采用一主多从或者级联结构，Redis主从复制可以根据是否是全量分为全量同步和增量同步。
		优点：
			1）、解决数据备份问题
			2）、做到读写分离，提高服务器性能
		缺点：
			1）、每个客户端连接redis实例的时候都是指定了ip和端口号的，如果所连接的redis实例因为故障下线了，而主从模式也没有提供一定的手段通知客户端另外可连接的客户端地址，
					因而需要手动更改客户端配置重新连接。
			2）、主从模式下，如果主节点由于故障下线了，那么从节点因为没有主节点而同步中断，因而需要人工进行故障转移工作。
			3）、无法实现动态扩容。
	
	2.sentinel模式（哨兵模式）
		Sentinel（哨兵）是Redis的高可用性解决方案：由一个或多个Sentinel实例组成的Sentinel系统可以监视任意多个主服务器，
		以及这些主服务器属下的所有从服务器，并在被监视的主服务器进入下线状态时，自动将下线主服务器属下的某个从服务器升级为新的主服务器。
		优点
			1、Master 状态监测
			2、如果Master 异常，则会进行Master-slave 转换，将其中一个Slave作为Master，将之前的Master作为Slave 
			3、Master-Slave切换后，master_redis.conf、slave_redis.conf和sentinel.conf的内容都会发生改变，即master_redis.conf中会多一行slaveof的配置，sentinel.conf的监控目标会随之调换
		缺点：
			1、如果是从节点下线了，sentinel是不会对其进行故障转移的，连接从节点的客户端也无法获取到新的可用从节点
			2、无法实现动态扩容

	3.cluster模式（集群模式）（暂时不作要求）
		一般集群建议搭建三主三从架构，三主提供服务，三从提供备份功能。
		每一个节点都存有这个集群所有主节点以及从节点的信息。
		它们之间通过互相的ping-pong判断是否节点可以连接上。如果有一半以上的节点去ping一个节点的时候没有回应，集群就认为这个节点宕机了，然后去连接它的备用节点。
		如果某个节点和所有从节点全部挂掉，我们集群就进入faill状态。还有就是如果有一半以上的主节点宕机，那么我们集群同样进入发力了状态。这就是我们的redis的投票机制。
要看的
https://www.kanzhun.com/gsmsh11823384.html?ka=ugc-detail-login?l_n_b_a=l_n_b_a

对象头
	https://www.cnblogs.com/makai/p/12466541.html

红黑树

BTree 和B+ tree

多线程

springCloud

锁




















